network "tester" {
// written by aGrUM 0.17.1
}

variable a.broken {
   type discrete[2] {no, yes};
}

variable b.broken {
   type discrete[2] {no, yes};
}

variable c.broken {
   type discrete[2] {no, yes};
}

variable tester.notWorking {
   type discrete[2] {no, yes};
}

variable callService {
   type discrete[2] {no, yes};
}

probability (a.broken) {
   default 0.75 0.25;
}

probability (b.broken | c.broken) {
   (no) 0.7 0.3;
   (yes) 0.3 0.7;

}
probability (c.broken) {
   default 0.5 0.5;
}

probability (tester.notWorking | a.broken, b.broken, callService) {
   (no, no, no) 1 0;
   (no, no, yes) 1 0;
   (yes, no, no) 0 1;
   (yes, no, yes) 1 0;
   (no, yes, no) 0 1;
   (no, yes, yes) 1 0;
   (yes, yes, no) 0 1;
   (yes, yes, yes) 1 0;
}

probability (callService) {
   default 1 0;
}