network "tester1" {
// written by aGrUM 0.17.1
}

variable a.broken {
   type discrete[2] {0, 1};
}

variable b.broken {
   type discrete[2] {0, 1};
}

variable c.broken {
   type discrete[2] {0, 1};
}

variable callService {
   type discrete[2] {0, 1};
}

variable tester.notWorking {
   type discrete[2] {0, 1};
}

probability (a.broken) {
   default 0.75 0.25;
}
probability (b.broken | c.broken) {
   (0) 0 0;
   (1) 0 0;
}
probability (c.broken) {
   default 0.5 0.5;
}
probability (callService) {
   default 1 0;
}
probability (tester.notWorking | callService, a.broken, b.broken) {
   (0, 0, 0) 0 0;
   (1, 0, 0) 0 0;
   (0, 1, 0) 0 0;
   (1, 1, 0) 0 0;
   (0, 0, 1) 0 0;
   (1, 0, 1) 0 0;
   (0, 1, 1) 0 0;
   (1, 1, 1) 0 0;
}

